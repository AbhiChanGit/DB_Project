generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement()) @map("user_id")
  username   String    @unique @db.VarChar(50)
  password   String    @map("password_hash") @db.VarChar(255)
  email      String    @unique @db.VarChar(100)
  user_type  String    @db.VarChar(10)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  addresses  Address[] @relation("UserToAddress")
  customer   Customer? // changed from customers
  staff      Staff? // changed from staff

  @@map("users")
}

model Customer {
  customer_id     Int            @id
  first_name      String         @db.VarChar(50)
  last_name       String         @db.VarChar(50)
  phone           String?        @db.VarChar(20)
  account_balance Decimal?       @default(0.00) @db.Decimal(10, 2)
  credit_cards    CreditCard[]
  user            User           @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction) // changed from users to user
  orders          Order[]
  shopping_carts  ShoppingCart[]

  @@map("customers")
}

model Staff {
  staff_id      Int            @id
  first_name    String         @db.VarChar(50)
  last_name     String         @db.VarChar(50)
  phone         String?        @db.VarChar(20)
  salary        Decimal        @db.Decimal(10, 2)
  job_title     String         @db.VarChar(50)
  hire_date     DateTime       @db.Date
  prices_set    ProductPrice[]
  user          User           @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction) // changed from users to user
  stock_updates Stock[]

  @@map("staff")
}

model Address {
  address_id     Int          @id @default(autoincrement())
  user_id        Int
  address_type   String       @db.VarChar(10)
  street_address String       @db.VarChar(100)
  city           String       @db.VarChar(50)
  state          String       @db.VarChar(50)
  postal_code    String       @db.VarChar(20)
  country        String       @db.VarChar(50)
  is_default     Boolean?     @default(false)
  user           User         @relation("UserToAddress", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "address_user_fk")
  credit_cards   CreditCard[]
  suppliers      Supplier[]
  warehouses     Warehouse[]

  @@map("addresses")
}

model CreditCard {
  card_id            Int      @id @default(autoincrement())
  customer_id        Int
  card_number        String   @db.VarChar(20)
  card_holder_name   String   @db.VarChar(100)
  expiry_date        DateTime @db.Date
  cvv                String   @db.VarChar(4)
  billing_address_id Int
  is_default         Boolean? @default(false)
  billing_address    Address  @relation(fields: [billing_address_id], references: [address_id], onDelete: NoAction, onUpdate: NoAction, map: "creditcard_address_fk")
  customer           Customer @relation(fields: [customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction, map: "creditcard_customer_fk")
  orders             Order[]

  @@map("credit_cards")
}

model Category {
  category_id Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  description String?
  products    Product[]

  @@map("categories")
}

model Product {
  product_id        Int               @id @default(autoincrement())
  name              String            @db.VarChar(100)
  description       String?
  category_id       Int?
  brand             String?           @db.VarChar(50)
  product_type      String?           @db.VarChar(50)
  size              String?           @db.VarChar(20)
  created_at        DateTime?         @default(now()) @db.Timestamp(6)
  last_updated      DateTime?         @default(now()) @updatedAt @db.Timestamp(6)
  cart_items        CartItem[]
  order_items       OrderItem[]
  prices            ProductPrice[]
  category          Category?         @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
  stock             Stock[]
  supplier_products SupplierProduct[]

  @@index([category_id], map: "idx_products_category")
  @@map("products")
}

model ProductPrice {
  price_id        Int       @id @default(autoincrement())
  product_id      Int
  price           Decimal   @db.Decimal(10, 2)
  start_date      DateTime? @default(now()) @db.Timestamp(6)
  end_date        DateTime? @db.Timestamp(6)
  set_by_staff_id Int?
  product         Product   @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
  set_by_staff    Staff?    @relation(fields: [set_by_staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("product_prices")
}

model Warehouse {
  warehouse_id  Int         @id @default(autoincrement())
  name          String      @db.VarChar(100)
  address_id    Int
  capacity      Decimal?    @db.Decimal(12, 2)
  current_usage Decimal?    @default(0.00) @db.Decimal(12, 2)
  order_items   OrderItem[]
  stock         Stock[]
  address       Address     @relation(fields: [address_id], references: [address_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("warehouses")
}

model Stock {
  stock_id            Int       @id @default(autoincrement())
  product_id          Int
  warehouse_id        Int
  quantity            Int       @default(0)
  last_updated        DateTime? @default(now()) @db.Timestamp(6)
  updated_by_staff_id Int?
  product             Product   @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
  updated_by_staff    Staff?    @relation(fields: [updated_by_staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
  warehouse           Warehouse @relation(fields: [warehouse_id], references: [warehouse_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([product_id, warehouse_id])
  @@index([product_id], map: "idx_stock_product")
  @@index([warehouse_id], map: "idx_stock_warehouse")
  @@map("stock")
}

model ShoppingCart {
  cart_id      Int        @id @default(autoincrement())
  customer_id  Int
  created_at   DateTime?  @default(now()) @db.Timestamp(6)
  last_updated DateTime?  @default(now()) @db.Timestamp(6)
  cart_items   CartItem[]
  customer     Customer   @relation(fields: [customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([customer_id], map: "idx_cart_customer")
  @@map("shopping_carts")
}

model CartItem {
  cart_item_id Int          @id @default(autoincrement())
  cart_id      Int
  product_id   Int
  quantity     Int          @default(1)
  added_at     DateTime?    @default(now()) @db.Timestamp(6)
  cart         ShoppingCart @relation(fields: [cart_id], references: [cart_id], onDelete: NoAction, onUpdate: NoAction)
  product      Product      @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([cart_id, product_id])
  @@map("cart_items")
}

model Order {
  order_id       Int            @id @default(autoincrement())
  customer_id    Int
  order_date     DateTime?      @default(now()) @db.Timestamp(6)
  status         String         @db.VarChar(20)
  credit_card_id Int?
  total_amount   Decimal        @db.Decimal(10, 2)
  delivery_plan  DeliveryPlan[]
  items          OrderItem[]
  credit_card    CreditCard?    @relation(fields: [credit_card_id], references: [card_id], onDelete: NoAction, onUpdate: NoAction)
  customer       Customer       @relation(fields: [customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([customer_id], map: "idx_order_customer")
  @@index([order_date], map: "idx_order_date")
  @@index([status], map: "idx_order_status")
  @@map("orders")
}

model OrderItem {
  order_item_id Int        @id @default(autoincrement())
  order_id      Int
  product_id    Int
  quantity      Int
  unit_price    Decimal    @db.Decimal(10, 2)
  warehouse_id  Int?
  order         Order      @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction)
  product       Product    @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
  warehouse     Warehouse? @relation(fields: [warehouse_id], references: [warehouse_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("order_items")
}

model DeliveryPlan {
  delivery_id     Int       @id @default(autoincrement())
  order_id        Int
  delivery_type   String    @db.VarChar(10)
  delivery_price  Decimal   @db.Decimal(10, 2)
  ship_date       DateTime? @db.Date
  delivery_date   DateTime? @db.Date
  tracking_number String?   @db.VarChar(50)
  order           Order     @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("delivery_plans")
}

model Supplier {
  supplier_id    Int               @id @default(autoincrement())
  name           String            @db.VarChar(100)
  contact_person String?           @db.VarChar(100)
  email          String?           @db.VarChar(100)
  phone          String?           @db.VarChar(20)
  address_id     Int?
  products       SupplierProduct[]
  address        Address?          @relation(fields: [address_id], references: [address_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("suppliers")
}

model SupplierProduct {
  supplier_product_id Int      @id @default(autoincrement())
  supplier_id         Int
  product_id          Int
  supplier_price      Decimal  @db.Decimal(10, 2)
  product             Product  @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
  supplier            Supplier @relation(fields: [supplier_id], references: [supplier_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([supplier_id, product_id])
  @@map("supplier_products")
}

model Verifying {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email      String    @db.VarChar(100)
  code       String    @db.VarChar(100)
  created_at DateTime? @default(now()) @db.Timestamp(6)

  @@map("verifying")
}
