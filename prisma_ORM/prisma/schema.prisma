// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma
// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  customer
  staff
}

enum AddressType {
  shipping
  billing
  both
}

enum OrderStatus {
  issued
  processing
  shipped
  delivered
  cancelled
}

enum DeliveryType {
  standard
  express
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique @db.VarChar(50)
  password   String    @db.VarChar(255)
  email      String    @unique @db.VarChar(100)
  user_type  UserType
  created_at DateTime  @default(now()) @db.Timestamp(6)
  customer   Customer?
  staff      Staff?
  addresses  Address[] @relation("UserToAddress", map: "user_addresses_fk")

  @@map("users")
}

model Customer {
  id              Int            @id @default(autoincrement())
  user_id         Int            @unique
  user            User           @relation(fields: [user_id], references: [id])
  first_name      String         @db.VarChar(50)
  last_name       String         @db.VarChar(50)
  phone           String?        @db.VarChar(20)
  account_balance Float          @default(0.00)
  addresses      Address[] @relation("CustomerToAddress", map: "customer_addresses_fk")
  credit_cards    CreditCard[]
  shopping_carts  ShoppingCart[]
  orders          Order[]

  @@map("customers")
}

model Staff {
  id            Int            @id @default(autoincrement())
  user_id       Int            @unique
  user          User           @relation(fields: [user_id], references: [id])
  first_name    String         @db.VarChar(50)
  last_name     String         @db.VarChar(50)
  phone         String?        @db.VarChar(20)
  salary        Float
  job_title     String         @db.VarChar(50)
  hire_date     DateTime
  prices_set    ProductPrice[]
  stock_updates Stock[]

  @@map("staff")
}

model Address {
  id             Int          @id @default(autoincrement())
  user_id        Int
  user           User         @relation("UserToAddress", fields: [user_id], references: [id], map: "address_user_fk")
  customer       Customer?    @relation("CustomerToAddress", fields: [user_id], references: [user_id], map: "address_customer_fk")
  address_type   AddressType
  street_address String       @db.VarChar(100)
  city           String       @db.VarChar(50)
  state          String       @db.VarChar(50)
  postal_code    String       @db.VarChar(20)
  country        String       @db.VarChar(50)
  is_default     Boolean      @default(false)
  credit_cards   CreditCard[]
  warehouses     Warehouse[]
  suppliers      Supplier[]

  @@map("addresses")
}

model CreditCard {
  id                 Int      @id @default(autoincrement())
  customer_id        Int
  customer           Customer @relation(fields: [customer_id], references: [id], map: "creditcard_customer_fk")
  card_number        String   @db.VarChar(20)
  card_holder_name   String   @db.VarChar(100)
  expiry_date        DateTime
  cvv                String   @db.VarChar(4)
  billing_address_id Int
  billing_address    Address  @relation(fields: [billing_address_id], references: [id], map: "creditcard_address_fk")
  is_default         Boolean  @default(false)
  orders             Order[]

  @@map("credit_cards")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  description String?
  products    Product[]

  @@map("categories")
}

model Product {
  id                Int               @id @default(autoincrement())
  name              String            @db.VarChar(100)
  description       String?
  category_id       Int?
  category          Category?         @relation(fields: [category_id], references: [id])
  brand             String?           @db.VarChar(50)
  product_type      String?           @db.VarChar(50)
  size              String?           @db.VarChar(20)
  image_url         String?           @db.VarChar(255)
  created_at        DateTime          @default(now())
  last_updated      DateTime          @default(now()) @updatedAt
  prices            ProductPrice[]
  stock             Stock[]
  cart_items        CartItem[]
  order_items       OrderItem[]
  supplier_products SupplierProduct[]

  @@map("products")
}

model ProductPrice {
  id              Int       @id @default(autoincrement())
  product_id      Int
  product         Product   @relation(fields: [product_id], references: [id])
  price           Float
  start_date      DateTime  @default(now())
  end_date        DateTime?
  set_by_staff_id Int?
  set_by_staff    Staff?    @relation(fields: [set_by_staff_id], references: [id])

  @@map("product_prices")
}

model Warehouse {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(100)
  address_id    Int
  address       Address     @relation(fields: [address_id], references: [id])
  capacity      Float?
  current_usage Float       @default(0.00)
  stock         Stock[]
  order_items   OrderItem[]

  @@map("warehouses")
}

model Stock {
  id                  Int       @id @default(autoincrement())
  product_id          Int
  product             Product   @relation(fields: [product_id], references: [id])
  warehouse_id        Int
  warehouse           Warehouse @relation(fields: [warehouse_id], references: [id])
  quantity            Int       @default(0)
  last_updated        DateTime  @default(now())
  updated_by_staff_id Int?
  updated_by_staff    Staff?    @relation(fields: [updated_by_staff_id], references: [id])

  @@unique([product_id, warehouse_id])
  @@map("stock")
}

model ShoppingCart {
  id           Int        @id @default(autoincrement())
  customer_id  Int
  customer     Customer   @relation(fields: [customer_id], references: [id])
  created_at   DateTime   @default(now())
  last_updated DateTime   @default(now())
  cart_items   CartItem[]

  @@map("shopping_carts")
}

model CartItem {
  id         Int          @id @default(autoincrement())
  cart_id    Int
  cart       ShoppingCart @relation(fields: [cart_id], references: [id])
  product_id Int
  product    Product      @relation(fields: [product_id], references: [id])
  quantity   Int          @default(1)
  added_at   DateTime     @default(now())

  @@unique([cart_id, product_id])
  @@map("cart_items")
}

model Order {
  id             Int           @id @default(autoincrement())
  customer_id    Int
  customer       Customer      @relation(fields: [customer_id], references: [id])
  order_date     DateTime      @default(now())
  status         String        @db.VarChar(20)
  credit_card_id Int?
  credit_card    CreditCard?   @relation(fields: [credit_card_id], references: [id])
  total_amount   Float
  items          OrderItem[]
  delivery_plan  DeliveryPlan?

  @@map("orders")
}

model OrderItem {
  id           Int        @id @default(autoincrement())
  order_id     Int
  order        Order      @relation(fields: [order_id], references: [id])
  product_id   Int
  product      Product    @relation(fields: [product_id], references: [id])
  quantity     Int
  unit_price   Float
  warehouse_id Int?
  warehouse    Warehouse? @relation(fields: [warehouse_id], references: [id])

  @@map("order_items")
}

model DeliveryPlan {
  id              Int       @id @default(autoincrement())
  order_id        Int       @unique
  order           Order     @relation(fields: [order_id], references: [id])
  delivery_type   String    @default("standard") @db.VarChar(10)
  delivery_price  Float
  ship_date       DateTime?
  delivery_date   DateTime?
  tracking_number String?   @db.VarChar(50)

  @@map("delivery_plans")
}

model Supplier {
  id             Int               @id @default(autoincrement())
  name           String            @db.VarChar(100)
  contact_person String?           @db.VarChar(100)
  email          String?           @db.VarChar(100)
  phone          String?           @db.VarChar(20)
  address_id     Int?
  address        Address?          @relation(fields: [address_id], references: [id])
  products       SupplierProduct[]

  @@map("suppliers")
}

model SupplierProduct {
  id             Int      @id @default(autoincrement())
  supplier_id    Int
  supplier       Supplier @relation(fields: [supplier_id], references: [id])
  product_id     Int
  product        Product  @relation(fields: [product_id], references: [id])
  supplier_price Float

  @@unique([supplier_id, product_id])
  @@map("supplier_products")
}
